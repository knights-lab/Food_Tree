x <-c(0.83045,0.000583,0.629129,0.593527,0.735863)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <-c(0.93858,0.00515,0.83757,0.49479,0.92551)
unlist(lapply(x, p.adjust, n=118, method="fdr"))
x <- rep(0.0147, 119)
p.adjust(x, method="fdr")
x
x <- cbind(c(1,1,1), c(2,2,2))
x
colMeans(x)
x <- cbind(c(1,1,1), c(2,2,2))
x
rownames(x) <- c("a","b","c")
rownames(x)[which(x[,1] %in% c(1,2))]
rownames(x)[x[,1] %in% c(1,2)]
x[,1] %in% c(1,2)
?rank
library(beeswarm)
beeswarm(x=-log10(rep(1:10)), main="Alpha Diversity",#
			ylab="Effect Size", pwpch=rep(23,length(unlist(cols))), pwcol=unlist(cols), pwbg=unlist(cols))#
legend("topright", legend = c("Yes", "No"), pch = pch , col = 1:2)
beeswarm(x=(rep(1:10)), main="Alpha Diversity",#
			ylab="Effect Size", pwpch=rep(23,length(unlist(cols))), pwcol=unlist(cols), pwbg=unlist(cols))#
legend("topright", legend = c("Yes", "No"), pch = pch , col = 1:2)
beeswarm(x=(rep(1:10)), main="Alpha Diversity")
line(1)
abline(h=2)
beeswarm(x=(rep(1:10)), main="Alpha Diversity")
abline(h=2, lty=2)
?wilcox.test
?lm
test <- cbind(1:2,1:2)
rownames(test) <- "#S"
rownames(test) <- c("#S", "1")
test
?abline
x <- 1 > 3
x
x <- 5 > 3
x
class(x)
pwr.anova.test()
library(pwr)
?pwr.anova.test()
pwr.anova.test(2, f=-0.0334525, sig.level=0.05, power=.80)
pwr.anova.test(2, f=0.0334525, sig.level=0.05, power=.80)
pwr.anova.test(2, f=0.1555, sig.level=0.05, power=.80)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.1554/.0107)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.03345/.00928)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=..03/.001)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=..03/.003)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.03/.003)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.007/.001)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.145/.02)
pwr.t.test(sig.level=0.05, power=.80, type="two.sample", d=.001746/.0002)
.03345/.00928
?Sys.geten
?Sys.getenv
library(optparse)
install.packages("optparse")
library(optparse)
?hclust
setwd("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R")
source(paste0(FT_FOLDER,"/lib/newick.tree.r"))source(paste0(FT_FOLDER,"/lib/check.food.db.r"))source(paste0(FT_FOLDER,"/lib/format.food.file.r"))source(paste0(FT_FOLDER,"/lib/make.food.tree.r"))
FT_FOLDER <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R"source(paste0(FT_FOLDER,"/lib/newick.tree.r"))source(paste0(FT_FOLDER,"/lib/check.food.db.r"))source(paste0(FT_FOLDER,"/lib/format.food.file.r"))source(paste0(FT_FOLDER,"/lib/make.food.tree.r"))
orig_food_records_fn <- "data/IMP/Completedietrecords.txt"food_records_fn <- "data/IMP/dietrecords.txt"orig_database_fn <- "data/IMP/CompleteSuperTrackerDatabase.txt" # default databasefood_database_fn <- "data/IMP/SuperTrackerDatabase.txt"
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
head(diet)
cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)
record_id <- "Sample.ID"
cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)
dim(diet)
diet[5620,]
format.food.file(orig_food_records_fn, food_records_fn)
orig_food_records_fn <- "data/IMP/original_dietrecords.txt"food_records_fn <- "data/IMP/dietrecords.txt"orig_database_fn <- "data/IMP/original_SuperTrackerDatabase.txt" # default databasefood_database_fn <- "data/IMP/SuperTrackerDatabase.txt"
format.food.file(orig_food_records_fn, food_records_fn)
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)
class(diet$grams)
head(diet)
diet$grams <- as.numeric(diet$grams)
head(diet$grams)
cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)
head(cdiet)
cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = record_id, direction = "wide")
head(cdiet.w)
head(cdiet)
dim(cdiet.w)
cdiet.w[is.na(cdiet.w)] <- 0
cdiet.w[,1]
cdiet.w[,2]
cdiet.w[,3]
cdiet.w[1:5,3]
cdiet.w[1:5,1:5]
head(cdiet[order(cdiet$Sample.ID),]_
head(cdiet[order(cdiet$Sample.ID),])
cdiet[order(cdiet$Sample.ID),]
diet[order(diet$Sample.ID),]
diet[diet$Sample.ID=="CS.001",]
source(paste0(FT_FOLDER,"/lib/format.food.file.r"))
format.food.file(orig_food_records_fn, food_records_fn, dedupe=F) # do NOT deduplicate
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0
head(cdiet.w)
write.table(cdiet.w, file=test.txt)
write.table(cdiet.w, file="test.txt")
write.table(cdiet.w, file="test.txt", sep="\t", quote=F, row.names=F)
diet[diet$Sample.ID=="CS.001",]
head(cdiet.w)
colnames(cdiet.w)
cdiet.w[cdiet.w$SampleID=="CS.001",]
cdiet.w[cdiet.w$Sample.ID=="CS.001",]
unlist(cdiet.w[cdiet.w$Sample.ID=="CS.001",])
cdiet.w[cdiet.w$Sample.ID=="CS.001",,drop=T]
cdiet.w[cdiet.w$Sample.ID=="CS.001",]
cdiet.w[cdiet.w$Sample.ID=="CS.001",] > 0
sum(cdiet.w[cdiet.w$Sample.ID=="CS.001",] > 0)
diet[diet$Sample.ID=="CS.001",]
?reshape
colnames(cdiet.w)
?gsub
colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w))
colnames(cdiet.w)
food_taxonomy_fn<-"output/supertracker.taxonomy.txt"
food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="")
head(food.taxonomy)
food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T)
head(food.taxonomy)
t.cdiet.w <- t(cdiet.w)
head(t.cdiet.w)
?aggregate
head(cdiet.w)
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(record_id, "FoodID", "total.grams")    rownames(cdiet) <- cdiet[,record_id]    cdiet <- cdiet[,-1]    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1]    cdiet.w <- cdiet.w[,-1]
cdiet.w[1:5,1:5]
head(food.taxonomy)
food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)
head(food.taxonomy)
food.otu <- merge(cdiet.w, food.taxonomy, by=0)
food.otu[1:5,1:5]
t.cdiet.w <- t(cdiet.w)
food.otu <- merge(t.cdiet.w, food.taxonomy, by=0)
food.otu[1:5,1:5]
head(t.cdiet.w)
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames    cdiet.w <- cdiet.w[,-1]        colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only    t.cdiet.w <- t(cdiet.w)#
    food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)#
    food.otu <- merge(t.cdiet.w, food.taxonomy, by=0)
food.otu[1:5,1:5]
food.otu[1:2,]
class(food.otu)
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames    cdiet.w <- cdiet.w[,-1]        colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only    t.cdiet.w <- t(cdiet.w)#
    food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)#
    food.otu <- merge(t.cdiet.w, food.taxonomy[,1], by=0)    rownames(food.otu) <- food.otu[,1]    food.otu <- food.otu[,-1]
head(food.otu)
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames    cdiet.w <- cdiet.w[,-1]        colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only    t.cdiet.w <- t(cdiet.w)#
    food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)#
    food.otu <- merge(t.cdiet.w, food.taxonomy[,1], by=0)
head(food.otu)
food.otu <- merge(t.cdiet.w, food.taxonomy[,1,drop=F], by=0)
head(food.otu)
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames    cdiet.w <- cdiet.w[,-1]        colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only    t.cdiet.w <- t(cdiet.w)#
    food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)#
    food.otu <- merge(t.cdiet.w, food.taxonomy[,1,drop=F], by=0)    rownames(food.otu) <- food.otu[,1]    food.otu <- food.otu[,-1]
head(food.otu)
# read everything in as a character to preserve numeric food codes and IDs    diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,food_record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(food_record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames    cdiet.w <- cdiet.w[,-1]        colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only    t.cdiet.w <- t(cdiet.w)#
    food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)#
    food.otu <- merge(t.cdiet.w, food.taxonomy[,1,drop=F], by=0)    rownames(food.otu) <- food.otu[,1]    food.otu <- food.otu[,-1]#
    cat("#FOODID\t", output_fn)    write.table(food.otu, output_fn, sep = "\t", row.names = FALSE, quote = FALSE, append=T)
output_fn <- "test.fu.table.txt"
food_record_id <- record_id
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$grams <- as.numeric(diet$grams)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$grams, by=list(diet[,food_record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(food_record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames    cdiet.w <- cdiet.w[,-1]        colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only    t.cdiet.w <- t(cdiet.w)#
    food.taxonomy <- read.table(food_taxonomy_fn, sep="\t", colClasses="character", quote="", header=T, row=1)#
    food.otu <- merge(t.cdiet.w, food.taxonomy[,1,drop=F], by=0)    rownames(food.otu) <- food.otu[,1]    food.otu <- food.otu[,-1]#
    cat("#FOODID\t", output_fn)    write.table(food.otu, output_fn, sep = "\t", row.names = FALSE, quote = FALSE, append=T)
?write.table
cat("#FOODID\t", output_fn)    write.table(food.otu, output_fn, sep = "\t", quote = F, append=T)
cat("#FOODID\t", file=output_fn)
?write.table
write.table(food.otu, output_fn, sep = "\t", quote = F, append=TRUE)
setwd("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R")
source("lib/newick.tree.r")source("lib/check.db.r")source("lib/format.foods.r")source("lib/make.food.tree.r")source("lib/make.food.otu.r")orig_food_records_fn <- "data/IMP/original_dietrecords.txt"orig_database_fn <- "data/IMP/original_SuperTrackerDatabase.txt"food_records_fn <- "data/IMP/dietrecords.txt"food_database_fn <- "data/IMP/SuperTrackerDatabase.txt"food_taxonomy_fn <- "output/supertracker.taxonomy.txt"# make sure all food files are properly formatted with FoodIDsformat.foods(orig_database_fn, food_database_fn)format.foods(orig_food_records_fn, food_records_fn, dedupe=F) # do NOT deduplicate records# format additional food files here as well# check if any foods in our diets are missing from our databasecheck.db(food_database_fn, food_records_fn, output_fn="data/IMP/missing.txt")make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=NULL, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)#
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
source("lib/make.food.tree.r")source("lib/make.food.otu.r")
make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=NULL, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
source("lib/make.food.otu.r")
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
source("lib/make.food.otu.r")
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
source("lib/make.food.otu.r")
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
format.foods(input_fn="../raw data/Items_to_use.txt", output_fn="data/MCT/dietrecords.txt", dedupe=F)
fdata$Main.food.description
x<-cbind(1:10,1:10)
x
x$5
x$x
source("lib/format.foods.r")
format.foods(input_fn="../raw data/Items_to_use.txt", output_fn="data/MCT/dietrecords.txt", dedupe=F)
make.food.otu(food_records_fn="data/MCT/dietrecords.txt", food_record_id = "X.Sample.ID", food_taxonomy_fn="output/mct.taxonomy.txt",                 output_fn = "output/mct.food.otu.txt")
food_records_fn="data/MCT/dietrecords.txt"; food_record_id = "X.Sample.ID"; food_taxonomy_fn="output/mct.taxonomy.txt";                output_fn = "output/mct.food.otu.txt"
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
dim(diet)
head(diet)
colnames(diet)
diet$FoodAmt
orig_food_records_fn <- "../raw data/IMP/original_dietrecords.txt"orig_database_fn <- "../raw data/IMP/original_SuperTrackerDatabase.txt"food_records_fn <- "data/IMP/dietrecords.txt"food_database_fn <- "data/IMP/SuperTrackerDatabase.txt"food_taxonomy_fn <- "output/supertracker.taxonomy.txt"# make sure all food files are properly formatted with FoodIDsformat.foods(orig_database_fn, food_database_fn)format.foods(orig_food_records_fn, food_records_fn, dedupe=F) # do NOT deduplicate records# format additional food files here as well# check if any foods in our diets are missing from our databasecheck.db(food_database_fn, food_records_fn, output_fn="data/IMP/missing.txt")make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=NULL, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)#
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
orig_food_records_fn <- "../raw data/original_dietrecords.txt"orig_database_fn <- "../raw data/original_SuperTrackerDatabase.txt"food_records_fn <- "data/IMP/dietrecords.txt"food_database_fn <- "data/IMP/SuperTrackerDatabase.txt"food_taxonomy_fn <- "output/supertracker.taxonomy.txt"# make sure all food files are properly formatted with FoodIDsformat.foods(orig_database_fn, food_database_fn)format.foods(orig_food_records_fn, food_records_fn, dedupe=F) # do NOT deduplicate records# format additional food files here as well# check if any foods in our diets are missing from our databasecheck.db(food_database_fn, food_records_fn, output_fn="data/IMP/missing.txt")make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=NULL, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)#
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
orig_food_records_fn <- "../raw data/imp_original_dietrecords.txt"orig_database_fn <- "../raw data/original_SuperTrackerDatabase.txt"food_records_fn <- "data/IMP/dietrecords.txt"food_database_fn <- "data/IMP/SuperTrackerDatabase.txt"food_taxonomy_fn <- "output/supertracker.taxonomy.txt"# make sure all food files are properly formatted with FoodIDsformat.foods(orig_database_fn, food_database_fn)format.foods(orig_food_records_fn, food_records_fn, dedupe=F) # do NOT deduplicate records# format additional food files here as well# check if any foods in our diets are missing from our databasecheck.db(food_database_fn, food_records_fn, output_fn="data/IMP/missing.txt")make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=NULL, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)#
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
orig_food_records_fn <- "../raw data/imp_originaldietrecords.txt"orig_database_fn <- "../raw data/original_SuperTrackerDatabase.txt"food_records_fn <- "data/IMP/dietrecords.txt"food_database_fn <- "data/IMP/SuperTrackerDatabase.txt"food_taxonomy_fn <- "output/supertracker.taxonomy.txt"# make sure all food files are properly formatted with FoodIDsformat.foods(orig_database_fn, food_database_fn)format.foods(orig_food_records_fn, food_records_fn, dedupe=F) # do NOT deduplicate records# format additional food files here as well# check if any foods in our diets are missing from our databasecheck.db(food_database_fn, food_records_fn, output_fn="data/IMP/missing.txt")make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=NULL, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)#
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
orig_food_records_fn <- "../raw data/original_impdietrecords.txt"orig_database_fn <- "../raw data/original_SuperTrackerDatabase.txt"food_records_fn <- "data/IMP/dietrecords.txt"food_database_fn <- "data/IMP/SuperTrackerDatabase.txt"food_taxonomy_fn <- "output/supertracker.taxonomy.txt"# make sure all food files are properly formatted with FoodIDsformat.foods(orig_database_fn, food_database_fn)format.foods(orig_food_records_fn, food_records_fn, dedupe=F) # do NOT deduplicate records# format additional food files here as well# check if any foods in our diets are missing from our databasecheck.db(food_database_fn, food_records_fn, output_fn="data/IMP/missing.txt")make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=NULL, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)#
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
nodes_fn="data/NodeLabels.txt"; food_database_fn;#
    addl_foods_fn=NULL; output_tree_fn="output/supertracker.tree.txt";#
    output_taxonomy_fn = food_taxonomy_fn
fdata <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    nodes <- read.table(nodes_fn, header = TRUE, sep="\t", colClasses="character")    main <- fdata[,c("FoodID", "Main.food.description")]    # add additional food codes    if(!is.null(addl_foods_fn))        for(i in 1:length(addl_foods_fn)){            new.foods <- read.table(addl_foods_fn[i], header=T, sep="\t", colClasses="character")            main <- rbind(main, new.foods[,c("FoodID", "Main.food.description")])        }    flevels <- NULL    for(i in 1:num.levels)        flevels <- cbind(flevels, I(substr(main$FoodID, 1, i)))    colnames(flevels) <- paste0("L",1:num.levels)    main <- data.frame(main, flevels, stringsAsFactors=F)
num.levels=5
fdata <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    nodes <- read.table(nodes_fn, header = TRUE, sep="\t", colClasses="character")    main <- fdata[,c("FoodID", "Main.food.description")]    # add additional food codes    if(!is.null(addl_foods_fn))        for(i in 1:length(addl_foods_fn)){            new.foods <- read.table(addl_foods_fn[i], header=T, sep="\t", colClasses="character")            main <- rbind(main, new.foods[,c("FoodID", "Main.food.description")])        }    flevels <- NULL    for(i in 1:num.levels)        flevels <- cbind(flevels, I(substr(main$FoodID, 1, i)))    colnames(flevels) <- paste0("L",1:num.levels)    main <- data.frame(main, flevels, stringsAsFactors=F)
main.melt <- melt(main, id.vars = "FoodID", variable.name = "Level", value.name = "Level.code")    main.merge <- merge(main.melt, nodes, by = "Level.code")    main.cast <- dcast(main.merge, FoodID ~ Level, value.var = "Main.food.description")    # prepend level to all level descriptions    main.cast[is.na(main.cast)] <- ""    main.cast[,colnames(main.cast)[-1]] <- sapply(colnames(main.cast)[-1], function(colname) paste(colname, main.cast[,colname], sep="_"))    # merge back with original table to grab Food Description    main.join <- merge(main.cast, main[,c("FoodID","Main.food.description")], by="FoodID")    # create a proper newick string for the tree    newickstring <- paste("foodtreeroot", apply(main.join, 1, function(xx) paste(xx[-1], collapse="/")), sep="/")    # create a proper taxonomy string for QIIME    taxonomy <- apply(main.join, 1, function(xx) paste(xx[-1], collapse=";"))    final.table <- data.frame(main.join, newickstring, taxonomy, stringsAsFactors=F)
head(main.merge)
head(main)
head(fdata)
input_fn = orig_database_fn; output_fn= food_database_fn
dedupe=T
fdata <- read.table(input_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # if it exists as a column, reformat the Main.food.description    if(sum(colnames(fdata) == "Main.food.description") == 1){        fdata$Old.Main.food.description <- fdata$Main.food.description        # replace anything that isn't a number or character with an underscore (format for QIIME)        fdata$Main.food.description <- gsub("[^[:alnum:]]+", "_", fdata$Main.food.description)    }
head(fdata)
sum(colnames(fdata) == "ModCode")==0
fdata$FoodID <- paste(fdata$FoodCode, fdata$ModCode, sep=".")
head(fdata)
dedupe=T
if(dedupe) fdata <- fdata[!duplicated(fdata$FoodID),]
head(fdata)
write.table(fdata, output_fn, sep = "\t", quote = FALSE, row.names = FALSE)
source("lib/newick.tree.r")source("lib/check.db.r")source("lib/format.foods.r")source("lib/make.food.tree.r")source("lib/make.food.otu.r")orig_food_records_fn <- "../raw data/original_impdietrecords.txt"orig_database_fn <- "../raw data/original_SuperTrackerDatabase.txt"food_records_fn <- "data/IMP/dietrecords.txt"food_database_fn <- "data/IMP/SuperTrackerDatabase.txt"food_taxonomy_fn <- "output/supertracker.taxonomy.txt"# make sure all food files are properly formatted with FoodIDsformat.foods(orig_database_fn, food_database_fn)format.foods(orig_food_records_fn, food_records_fn, dedupe=F) # do NOT deduplicate records# format additional food files here as well# check if any foods in our diets are missing from our databasecheck.db(food_database_fn, food_records_fn, output_fn="data/IMP/missing.txt")make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=NULL, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)#
make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/food.otu.txt")
format.foods(input_fn="data/MCT/MainFoodDesc.txt", output_fn="data/MCT/ASA24Database.txt")format.foods(input_fn="data/MCT/MCTs_study_missing_variables.txt", output_fn="data/MCT/MCTs_study_missing_variables_formatted.txt")format.foods(input_fn="data/MCT/Soylent_codes.txt", output_fn="data/MCT/Soylent_codes_formatted.txt")format.foods(input_fn="../raw data/Items_to_use.txt", output_fn="data/MCT/dietrecords.txt", dedupe=F)#check.food.db(food_database_fn = "data/MCT/ASA24Database.txt", food_records_fn="data/MCT/dietrecords.txt", output_fn="data/MCT/missing.txt")# if there are missing foods, then create new files to add them in below under addl_foodsmake.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn="data/MCT/ASA24Database.txt",     addl_foods_fn=c("data/MCT/Soylent_codes_formatted.txt","data/MCT/MCTs_study_missing_variables_formatted.txt"), output_tree_fn="output/mct.tree.txt",     output_taxonomy_fn = "output/mct.taxonomy.txt")#
make.food.otu(food_records_fn="data/MCT/dietrecords.txt", food_record_id = "X.Sample.ID", food_taxonomy_fn="output/mct.taxonomy.txt",                 output_fn = "output/mct.food.otu.txt")
nodes_fn="data/NodeLabels.txt"; food_database_fn="data/MCT/ASA24Database.txt";#
    addl_foods_fn=c("data/MCT/Soylent_codes_formatted.txt","data/MCT/MCTs_study_missing_variables_formatted.txt"); output_tree_fn="output/mct.tree.txt";#
    output_taxonomy_fn = "output/mct.taxonomy.txt"
fdata <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    nodes <- read.table(nodes_fn, header = TRUE, sep="\t", colClasses="character")    main <- fdata[,c("FoodID", "Main.food.description")]    # add additional food codes    if(!is.null(addl_foods_fn))        for(i in 1:length(addl_foods_fn)){            new.foods <- read.table(addl_foods_fn[i], header=T, sep="\t", colClasses="character")            main <- rbind(main, new.foods[,c("FoodID", "Main.food.description")])        }    flevels <- NULL    for(i in 1:num.levels)        flevels <- cbind(flevels, I(substr(main$FoodID, 1, i)))    colnames(flevels) <- paste0("L",1:num.levels)    main <- data.frame(main, flevels, stringsAsFactors=F)
head(main)
head(fdata)
input_fn="data/MCT/MainFoodDesc.txt", output_fn="data/MCT/ASA24Database.txt"
input_fn="data/MCT/MainFoodDesc.txt"; output_fn="data/MCT/ASA24Database.txt"
fdata <- read.table(input_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # if it exists as a column, reformat the Main.food.description    if(sum(colnames(fdata) == "Main.food.description") == 1){        fdata$Old.Main.food.description <- fdata$Main.food.description        # replace anything that isn't a number or character with an underscore (format for QIIME)        fdata$Main.food.description <- gsub("[^[:alnum:]]+", "_", fdata$Main.food.description)    }    # add a default ModCode column if it doesn't exist    if(sum(colnames(fdata) == "ModCode")==0)        fdata$ModCode <- rep("0", nrow(fdata))#
    # make a new food id that also uses the mod.code     fdata$FoodID <- paste(fdata$FoodCode, fdata$ModCode, sep=".")    # grab the first occurence of any food id and we'll use that to construct the tree     # note that SuperTracker has duplicate names for each Food ID (important for mapping, but not for the actual tree)    if(dedupe) fdata <- fdata[!duplicated(fdata$FoodID),]
head(fdata)
fdata <- read.table(input_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
head(fdata)
sum(colnames(fdata) == "ModCode")==0
fdata$ModCode <- rep("0", nrow(fdata))
fdata$FoodID <- paste(fdata$FoodCode, fdata$ModCode, sep=".")
head(fdata)
format.foods(input_fn="data/MCT/MainFoodDesc.txt", output_fn="data/MCT/ASA24Database.txt")
format.foods(input_fn="data/MCT/MCTs_study_missing_variables.txt", output_fn="data/MCT/MCTs_study_missing_variables_formatted.txt")format.foods(input_fn="data/MCT/Soylent_codes.txt", output_fn="data/MCT/Soylent_codes_formatted.txt")format.foods(input_fn="../raw data/Items_to_use.txt", output_fn="data/MCT/dietrecords.txt", dedupe=F)#check.food.db(food_database_fn = "data/MCT/ASA24Database.txt", food_records_fn="data/MCT/dietrecords.txt", output_fn="data/MCT/missing.txt")# if there are missing foods, then create new files to add them in below under addl_foodsmake.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn="data/MCT/ASA24Database.txt",     addl_foods_fn=c("data/MCT/Soylent_codes_formatted.txt","data/MCT/MCTs_study_missing_variables_formatted.txt"), output_tree_fn="output/mct.tree.txt",     output_taxonomy_fn = "output/mct.taxonomy.txt")
make.food.otu(food_records_fn="data/MCT/dietrecords.txt", food_record_id = "X.Sample.ID", food_taxonomy_fn="output/mct.taxonomy.txt",                 output_fn = "output/mct.food.otu.txt")
food_records_fn="data/MCT/dietrecords.txt"; food_record_id = "X.Sample.ID";food_taxonomy_fn="output/mct.taxonomy.txt"''#
                output_fn = "output/mct.food.otu.txt"
food_records_fn="data/MCT/dietrecords.txt"; food_record_id = "X.Sample.ID";food_taxonomy_fn="output/mct.taxonomy.txt";#
                output_fn = "output/mct.food.otu.txt"
# read everything in as a character to preserve numeric food codes and IDs    diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$FoodAmt <- as.numeric(diet$FoodAmt)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$FoodAmt, by=list(diet[,food_record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(food_record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames    cdiet.w <- cdiet.w[,-1]        colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only    t.cdiet.w <- t(cdiet.w)
food_record_id
head(diet)
make.food.otu(food_records_fn="data/MCT/dietrecords.txt", food_record_id = "X.SampleID", food_taxonomy_fn="output/mct.taxonomy.txt",                 output_fn = "output/mct.food.otu.txt")
food_record_id = "X.SampleID"
# read everything in as a character to preserve numeric food codes and IDs    diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$FoodAmt <- as.numeric(diet$FoodAmt)    # sum total grams of each food eaten within a record    cdiet <- aggregate(diet$FoodAmt, by=list(diet[,food_record_id], diet$FoodID), FUN=sum)    colnames(cdiet) <- c(food_record_id, "FoodID", "total.grams")    cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")    cdiet.w[is.na(cdiet.w)] <- 0    rownames(cdiet.w) <- cdiet.w[,1] # make record_ids the rownames    cdiet.w <- cdiet.w[,-1]        colnames(cdiet.w) <- gsub("total.grams.", "", colnames(cdiet.w)) #rename column names to FoodIDs only    t.cdiet.w <- t(cdiet.w)
head(diet)
head(cdiet.w)
head(cdiet)
cdiet.w <- reshape(cdiet, timevar = "FoodID", idvar = food_record_id, direction = "wide")
head(cdiet.w)
head(diet)
diet <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
head(diet)
input_fn="../raw data/Items_to_use.txt"; output_fn="data/MCT/dietrecords.txt"; dedupe=F
fdata <- read.table(input_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # if it exists as a column, reformat the Main.food.description    if(sum(colnames(fdata) == "Main.food.description") == 1){        fdata$Old.Main.food.description <- fdata$Main.food.description        # replace anything that isn't a number or character with an underscore (format for QIIME)        fdata$Main.food.description <- gsub("[^[:alnum:]]+", "_", fdata$Main.food.description)    }    # add a default ModCode column if it doesn't exist    if(sum(colnames(fdata) == "ModCode")==0)        fdata$ModCode <- rep("0", nrow(fdata))
head(fdata)
format.foods(input_fn="../raw data/Items_to_use.txt", output_fn="data/MCT/dietrecords.txt", dedupe=F)
make.food.otu(food_records_fn="data/MCT/dietrecords.txt", food_record_id = "X.SampleID", food_taxonomy_fn="output/mct.taxonomy.txt",                 output_fn = "output/mct.food.otu.txt")

format.foods(orig_food_records_fn, old_food_records_fn, dedupe=F) # do NOT deduplicate records
diet <- read.table(old_food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    new.foods <- read.table(orig_new_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$tempID <- 1:nrow(diet) # create dummy ID for now#
    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    # write this out so we can pass it in when we make the food tree; remove foods with duplicate portions    # This file will be the formatted "new foods" that we'd like to supplement the SuperTracker Database with    x <- new.foods    x$FoodID <- paste(x$FoodCode, x$ModCode, sep=".")    x <- x[!duplicated(x$Main.food.description),]    write.table(x, new_foods_fn, sep = "\t", quote = FALSE, row.names = FALSE)    blank.diets <- diet[is.na(diet$FoodCode),]    # remove columns we're going to fill in     c.ix <- which(colnames(blank.diets) %in% c("FoodCode", "ModCode", "FoodAmt", "FoodID", "portionwgt"))    blank.diets <- blank.diets[,-c.ix]    new.diet <- merge(blank.diets, new.foods, by=c("Main.food.description", "Portion"))#
    valid.diets <- diet[!is.na(diet$FoodCode),]    valid.diets <- rbind(valid.diets[,intersect(colnames(new.diet), colnames(valid.diets))], new.diet[,intersect(colnames(new.diet), colnames(valid.diets))])    # now calculate the total grams eaten, and call it "FoodAmt" to be consistent with ASA24    valid.diets$FoodAmt <- as.numeric(valid.diets$PortionAmt) * as.numeric(valid.diets$portionwgt)#
    # make FoodID    valid.diets$FoodID <- paste(valid.diets$FoodCode, valid.diets$ModCode, sep=".")#
    # check temporary variable ID only to see if any foods are missing    #diet[!(diet$tempID %in% valid.diets$tempID),]    #write.table(unique(diet[!(diet$ID %in% valid.diets$ID),c("Main.food.description", "Old.Main.food.description")]), file="new.missing.foods.txt", sep="\t", row=F, quote=F)#
    write.table(valid.diets, food_records_fn, sep = "\t", quote = FALSE, row.names = FALSE)
fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/new.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables    write.table(favefoods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients$foodname)    db_nutrients$FoodID <- paste(db_nutrients$foodcode, db_nutrients$modcode, sep=".")#
    # load food database because we need the default portion for calculations    food_database_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/SuperTrackerDatabase.txt" # formatted    db <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)
missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]
missing.from.favefoods
colnames(db_nutrients)
intersect(colnames(db_nutrients), colnames(favefoods_nutrients))
colnames(favefoods_nutrients)
colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Total Calories")] <- "Energy (kcal)"
valid_nutrients <- intersect(colnames(db_nutrients), colnames(favefoods_nutrients))
valid_nutrients
valid_nutrients <- valid_nutrients[-length(valid_nutrients)]
valid_nutrients
additional_foods_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/new.foods.txt"    additional_foods_list <- read.table(additional_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)
head(additional_foods_list)
addl_foods_nutrients <- merge(additional_foods_list, favefoods_nutrients, by=c("Main.food.description","Portion"))
dim()
dim(addl_foods_nutrients)
dim(additional_foods_list)
dim(favefoods_nutrients)
?merge
setdiff(paste(additional_foods_list[,1], additional_foods_list[,2], sep="."), paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"], sep="."))
missing.from.db
head(missing.from.db)
missing.from.db <- unique(missing.from.db)
head(missing.from.db)
head(additional_foods_list)
class(missing.from.db$Main.food.description)
addl_foods_sub <- additional_foods_list[additional_foods_list$Mainfood.description %in% missing.from.db$Main.food.description,]
dim(addl_foods_sub)
missing.from.db$Main.food.description
sort(additional_foods_list$Main.food.description)
addl_foods_sub <- additional_foods_list[additional_foods_list$Main.food.description %in% missing.from.db$Main.food.description,]
addl_foods_sub
dim(addl_foods_sub)
length(missing.from.db)
dim(missing.from.db)
addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description", "Portion"))
dim(addl_foods_nutrients)
paste(addl_foods_sub[1,2])
paste(addl_foods_sub[,1:2])
paste(addl_foods_sub[,1:2], collapse=".")
paste(addl_foods_sub[,1:2], collapse=".", sep=".")
paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-")
head(favefoods_nutrients)
diffs <- setdiff(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-"), paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-"))
diffs
favefoods_nutrients[order(favefoods_nutrients$Main.food.description),c("Main.food.description","Portion")]
fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/new.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables    write.table(favefoods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    additional_foods_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/new.foods.txt"    additional_foods_list <- read.table(additional_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)#
    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients$foodname)    db_nutrients$FoodID <- paste(db_nutrients$foodcode, db_nutrients$modcode, sep=".")#
    # load food database because we need the default portion for calculations    food_database_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/SuperTrackerDatabase.txt" # formatted    db <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- additional_foods_list[additional_foods_list$Main.food.description %in% missing.from.db$Main.food.description,]
missing.from.favefoods
diffs
diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]
diffs
diffs$Portion
fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/new.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables    write.table(favefoods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    additional_foods_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/new.foods.txt"    additional_foods_list <- read.table(additional_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)#
    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients$foodname)    db_nutrients$FoodID <- paste(db_nutrients$foodcode, db_nutrients$modcode, sep=".")#
    # load food database because we need the default portion for calculations    food_database_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/SuperTrackerDatabase.txt" # formatted    db <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- additional_foods_list[additional_foods_list$Main.food.description %in% missing.from.db$Main.food.description,]    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]
diffs
addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))
dim(addl_foods_nutrients)
head(addl_foods_nutrients)
head(valid_diets)
head(valid.diets)
write.table(valid.diets, food_records_fn, sep = "\t", quote = FALSE, row.names = FALSE)
head(x)
write.table(x, new_foods_fn, sep = "\t", quote = FALSE, row.names = FALSE)
new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$FoodID <- paste(new.foods$foodcode, new.foods$modcode, sep=".")
new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")
fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables    write.table(favefoods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)
food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    additional_foods_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/new.foods.txt"    additional_foods_list <- read.table(additional_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)#
    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients$foodname)    db_nutrients$FoodID <- paste(db_nutrients$foodcode, db_nutrients$modcode, sep=".")#
    # load food database because we need the default portion for calculations    food_database_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/SuperTrackerDatabase.txt" # formatted    db <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]
# load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients$foodname)    db_nutrients$FoodID <- paste(db_nutrients$foodcode, db_nutrients$modcode, sep=".")#
    # load food database because we need the default portion for calculations    food_database_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/SuperTrackerDatabase.txt" # formatted    db <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]
missing.from.favefoods
missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]
diffs
addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))
dim(addl_foods_nutrients)
head(addl_foods_nutrients)
new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[is.na(new.foods$ModCode)] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")
head(new.foods)
new.foods$ModCode[new.foods$ModCode == ""] <- "0"
head(new.foods)
fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables    write.table(favefoods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients$foodname)    db_nutrients$FoodID <- paste(db_nutrients$foodcode, db_nutrients$modcode, sep=".")#
    # load food database because we need the default portion for calculations    food_database_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/SuperTrackerDatabase.txt" # formatted    db <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]    # diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))
missing.from.favefoods
diffs
head(addl_foods_nutrients)
addl_foods_nutrients[1:20,]
addl_foods_nutrients[1:50,]
addl_foods_nutrients$FoodID
head(addl_foods_nutrients)
colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))    valid_nutrients <- valid_nutrients[-length(valid_nutrients)]
valid_nutrients
valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))
valid_nutrients
colnames(addl_foods_nutrients)
colnames(db_nutrients)
food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]    # diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))#
    all_nutrients <- db_nutrients[,c("FoodID", "foodcode", "modcode", "Main.food.description", valid_nutrients)]
valid_nutrients
all_nutrients <- rbind(db_nutrients[, valid_nutrients], addl_foods_nutrients[, valid_nutrients])
dim(all_nutrients)
head(valid_nutrients)
head(all_nutrients)
food_database_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/SuperTrackerDatabase.txt" # formatted    db <- read.table(food_database_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)
head(db)
portion_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Portion Data.txt"    portion_db <- read.table(portion_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)
head(portion_db)
head(db_nutrients)
head(food_records)
61*2
122*(3.25/100)
food_records[20:40,]
hft <- read.table("/Users/pvangay/Downloads/HFT HFT Sign-In Sheets - all.tsv", sep="\t", header=F)
hft <- read.table("/Users/pvangay/Downloads/HFT Sign-In Sheets - all.tsv", sep="\t", header=F)
head(hft)
table(hft)
sort(table(hft))
write.table(sort(table(hft)), file="HFT - counts", quote=F, sep="\t", row.names=F)
hft <- read.table("~/Dropbox/UMN/KnightsLab/IMP/Allina Health Summer Events/registrations/all registrations.txt", sep="\t", header=F)
sort(table(hft))
write.table(sort(table(hft)), file="HFT registration - counts.txt", quote=F, sep="\t", row.names=F)
head(v)
head(addl_foods_nutrients)
write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)
# manually check spelling etc between fave foods list from supertracker and curated sheet    fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]    # diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))#
    #all_nutrients <- rbind(db_nutrients[, valid_nutrients], addl_foods_nutrients[, valid_nutrients])#
    # all diet records also already have each food and their respective weights in grams! So simply do:        # aggregate all food records by subject and FoodID (sum up how much of "rice" someone ate for a total day, in grams)        # take grams of each food per subject and multiply by (db_nutrients / 100) to get total nutrients for that food for that subject
head(db_nutrients)
head(addl_foods_nutrients)
format.foods(orig_food_records_fn, old_food_records_fn, dedupe=F) # do NOT deduplicate records
diet <- read.table(old_food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    new.foods <- read.table(orig_new_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$tempID <- 1:nrow(diet) # create dummy ID for now#
    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    # write this out so we can pass it in when we make the food tree; remove foods with duplicate portions    # This file will be the formatted "new foods" that we'd like to supplement the SuperTracker Database with    x <- new.foods    x$FoodID <- paste(x$FoodCode, x$ModCode, sep=".")    x <- x[!duplicated(x$Main.food.description),]    write.table(x, new_foods_fn, sep = "\t", quote = FALSE, row.names = FALSE)    blank.diets <- diet[is.na(diet$FoodCode),]    # remove columns we're going to fill in     c.ix <- which(colnames(blank.diets) %in% c("FoodCode", "ModCode", "FoodAmt", "FoodID", "portionwgt"))    blank.diets <- blank.diets[,-c.ix]    new.diet <- merge(blank.diets, new.foods, by=c("Main.food.description", "Portion"))#
    valid.diets <- diet[!is.na(diet$FoodCode),]    valid.diets <- rbind(valid.diets[,intersect(colnames(new.diet), colnames(valid.diets))], new.diet[,intersect(colnames(new.diet), colnames(valid.diets))])    # now calculate the total grams eaten, and call it "FoodAmt" to be consistent with ASA24    valid.diets$FoodAmt <- as.numeric(valid.diets$PortionAmt) * as.numeric(valid.diets$portionwgt)#
    # make FoodID    valid.diets$FoodID <- paste(valid.diets$FoodCode, valid.diets$ModCode, sep=".")#
    # check temporary variable ID only to see if any foods are missing    #diet[!(diet$tempID %in% valid.diets$tempID),]    #write.table(unique(diet[!(diet$ID %in% valid.diets$ID),c("Main.food.description", "Old.Main.food.description")]), file="new.missing.foods.txt", sep="\t", row=F, quote=F)#
    write.table(valid.diets, food_records_fn, sep = "\t", quote = FALSE, row.names = FALSE)
# manually check spelling etc between fave foods list from supertracker and curated sheet    fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]    # diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))#
    # all diet records also already have each food and their respective weights in grams! So simply do:        # aggregate all food records by subject and FoodID (sum up how much of "rice" someone ate for a total day, in grams)        # take grams of each food per subject and multiply by (db_nutrients / 100) to get total nutrients for that food for that subject
head(addl_foods_nutrients)
head(db_nutrients)
head(food_records)
food_records$FoodAmt
head(food_records)
?aggregate
format.foods(orig_food_records_fn, old_food_records_fn, dedupe=F) # do NOT deduplicate records
diet <- read.table(old_food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    new.foods <- read.table(orig_new_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$tempID <- 1:nrow(diet) # create dummy ID for now#
    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    # write this out so we can pass it in when we make the food tree; remove foods with duplicate portions    # This file will be the formatted "new foods" that we'd like to supplement the SuperTracker Database with    x <- new.foods    x$FoodID <- paste(x$FoodCode, x$ModCode, sep=".")    x <- x[!duplicated(x$Main.food.description),]    write.table(x, new_foods_fn, sep = "\t", quote = FALSE, row.names = FALSE)    blank.diets <- diet[is.na(diet$FoodCode),]    # remove columns we're going to fill in     c.ix <- which(colnames(blank.diets) %in% c("FoodCode", "ModCode", "FoodAmt", "FoodID", "portionwgt"))    blank.diets <- blank.diets[,-c.ix]    new.diet <- merge(blank.diets, new.foods, by=c("Main.food.description", "Portion"))#
    valid.diets <- diet[!is.na(diet$FoodCode),]    valid.diets <- rbind(valid.diets[,intersect(colnames(new.diet), colnames(valid.diets))], new.diet[,intersect(colnames(new.diet), colnames(valid.diets))])    # now calculate the total grams eaten, and call it "FoodAmt" to be consistent with ASA24    valid.diets$FoodAmt <- as.numeric(valid.diets$PortionAmt) * as.numeric(valid.diets$portionwgt)#
    # make FoodID    valid.diets$FoodID <- paste(valid.diets$FoodCode, valid.diets$ModCode, sep=".")#
    # check temporary variable ID only to see if any foods are missing    #diet[!(diet$tempID %in% valid.diets$tempID),]    #write.table(unique(diet[!(diet$ID %in% valid.diets$ID),c("Main.food.description", "Old.Main.food.description")]), file="new.missing.foods.txt", sep="\t", row=F, quote=F)#
    write.table(valid.diets, food_records_fn, sep = "\t", quote = FALSE, row.names = FALSE)
# manually check spelling etc between fave foods list from supertracker and curated sheet    fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]    # diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))#
    # all diet records also already have each food and their respective weights in grams (including missing foods)! So simply do:        # aggregate all food records by subject and FoodID (sum up how much of "rice" someone ate for a total day, in grams)        # take grams of each food per subject and multiply by (db_nutrients / 100) to get total nutrients for that food for that subject#
    # lump all foods eaten by each person for the entire day  #  food_records_daily <- aggregate(food_records$FoodAmt, list(Subject.ID=food_records$Subject.ID, Diet.Date=food_record$Diet.Date, FoodID=food_record$FoodID), sum)
head(food_records)
orig_food_records_fn <- "../raw data/meals.txt" # original diet records with special characters removed - this is generated in /metadataformatting with mapping file generationorig_database_fn <- "../raw data/original_SuperTrackerDatabase.txt" # original supertracker databaseorig_new_foods_fn <-  "../raw data/original_imp.missing.foods.txt" # hand-curated foods that were missing now assigned with food IDsold_food_records_fn <- "data/IMP/dietrecords.with.NAs.txt" # first run through, contains NAsfood_records_fn <- "data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.dietsnew_foods_fn <- "data/IMP/new.foods.tree.building.txt" # new foods used to construct tree only, duplicates caused by portions removed (written by add.missing.foods.to.diets)food_database_fn <- "data/IMP/SuperTrackerDatabase.txt" # formattedfood_taxonomy_fn <- "output/supertracker.taxonomy.txt" # outputted by make.food.treefood_reported_database_fn <- "data/IMP/SuperTrackerDatabase.foodsreportedonly.txt" # database containing only the foods eaten in this specific datasetfood_reported_taxonomy_fn <- "output/supertracker.taxonomy.foodsreportedonly.txt" # outputted by make.food.tree
format.foods(orig_food_records_fn, old_food_records_fn, dedupe=F) # do NOT deduplicate records
diet <- read.table(old_food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    new.foods <- read.table(orig_new_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$tempID <- 1:nrow(diet) # create dummy ID for now#
    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    # write this out so we can pass it in when we make the food tree; remove foods with duplicate portions    # This file will be the formatted "new foods" that we'd like to supplement the SuperTracker Database with    x <- new.foods    x$FoodID <- paste(x$FoodCode, x$ModCode, sep=".")    x <- x[!duplicated(x$Main.food.description),]    write.table(x, new_foods_fn, sep = "\t", quote = FALSE, row.names = FALSE)    blank.diets <- diet[is.na(diet$FoodCode),]    # remove columns we're going to fill in     c.ix <- which(colnames(blank.diets) %in% c("FoodCode", "ModCode", "FoodAmt", "FoodID", "portionwgt"))    blank.diets <- blank.diets[,-c.ix]    new.diet <- merge(blank.diets, new.foods, by=c("Main.food.description", "Portion"))#
    valid.diets <- diet[!is.na(diet$FoodCode),]    valid.diets <- rbind(valid.diets[,intersect(colnames(new.diet), colnames(valid.diets))], new.diet[,intersect(colnames(new.diet), colnames(valid.diets))])    # now calculate the total grams eaten, and call it "FoodAmt" to be consistent with ASA24    valid.diets$FoodAmt <- as.numeric(valid.diets$PortionAmt) * as.numeric(valid.diets$portionwgt)#
    # make FoodID    valid.diets$FoodID <- paste(valid.diets$FoodCode, valid.diets$ModCode, sep=".")#
    # check temporary variable ID only to see if any foods are missing    #diet[!(diet$tempID %in% valid.diets$tempID),]    #write.table(unique(diet[!(diet$ID %in% valid.diets$ID),c("Main.food.description", "Old.Main.food.description")]), file="new.missing.foods.txt", sep="\t", row=F, quote=F)#
    write.table(valid.diets, food_records_fn, sep = "\t", quote = FALSE, row.names = FALSE)
# manually check spelling etc between fave foods list from supertracker and curated sheet    fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]    # diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))#
    # all diet records also already have each food and their respective weights in grams (including missing foods)! So simply do:        # aggregate all food records by subject and FoodID (sum up how much of "rice" someone ate for a total day, in grams)        # take grams of each food per subject and multiply by (db_nutrients / 100) to get total nutrients for that food for that subject#
    # lump all foods eaten by each person for the entire day  #  food_records_daily <- aggregate(food_records$FoodAmt, list(Subject.ID=food_records$Subject.ID, Diet.Date=food_record$Diet.Date, FoodID=food_record$FoodID), sum)
head(food_records)
food_records[food_records$Old.Participant.ID=="L.034",]
food_records_daily <- aggregate(food_records$FoodAmt, list(Diet.ID=food_records$Diet.ID, FoodID=food_record$FoodID), sum)
food_records_daily <- aggregate(food_records$FoodAmt, list(Diet.ID=food_records$Diet.ID, FoodID=food_records$FoodID), sum)
food_records_daily <- aggregate(as.numeric(as.character(food_records$FoodAmt)), list(Diet.ID=food_records$Diet.ID, FoodID=food_records$FoodID), sum)
head(food_records_daily)
?aggregate
food_records_dietid <- aggregate(as.numeric(as.character(food_records$FoodAmt)), list(Diet.ID=food_records$Diet.ID, FoodID=food_records$FoodID), sum)
colnames(food_records_dietid)[3] <- "FoodAmt" # total grams of this food eaten by this person-day
valid_nutrients
all_nutrients <- rbind(db_nutrients[,valid_nutrients], addl_foods_nutrients[,valid_nutrients])
food_records_grouped <- aggregate(as.numeric(as.character(food_records$FoodAmt)), list(Diet.ID=food_records$Diet.ID, FoodID=food_records$FoodID), sum)    colnames(food_records_grouped)[3] <- "FoodAmt" # total grams of this food eaten by this person-day
food_records_nutrients <- merge(food_records_grouped, all_nutrients, by="Food.ID")
food_records_nutrients <- merge(food_records_grouped, all_nutrients, by="FoodID")
dim(food_records_nutrients)
dim(food_records_grouped)
setdiff(food_records_grouped$FoodID, all_nutrients$FoodID)
food_records_nutrients <- merge(food_records_grouped, all_nutrients, by="FoodID", all.x=TRUE)
write.table(food_records_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/meals_nutrients.txt", sep="\t", row.names=F, quote=F)
head(food_records_nutrients)
head(addl_foods_nutrients)
db_nutrients <- db_nutrients[,valid_nutrients]    addl_foods_nutrients <- addl_foods_nutrients[,valid_nutrients]
nually check spelling etc between fave foods list from supertracker and curated sheet    fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]    # diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"
head(addl_foods_nutrients)
valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))
valid_nutrients
valid_nutrients[c(length(valid_nutrients),(length(valid_nutrients)-1),1:(length(valid_nutrients)-2))]
valid_nutrients <- valid_nutrients[c(length(valid_nutrients),(length(valid_nutrients)-1),1:(length(valid_nutrients)-2))]
addl_foods_nutrients_gram <- addl_foods_nutrients[, c("portionwgt",valid_nutrients)]
head(addl_foods_nutrients_gram)
tail(valid_nutrients, 5)
class(    addl_foods_nutrients_gram[,7])
addl_foods_nutrients_gram[,7:ncol(addl_foods_nutrients_gram)] <- as.numeric(addl_foods_nutrients_gram[,7:ncol(addl_foods_nutrients_gram)])
addl_foods_nutrients_gram[,7:ncol(addl_foods_nutrients_gram)] <- apply(addl_foods_nutrients_gram[,7:ncol(addl_foods_nutrients_gram)], 1:2, as.numeric)
head(addl_foods_nutrients_gram)
class(    addl_foods_nutrients_gram[,7])
addl_foods_nutrients_gram$portionwgt <- as.numeric(addl_foods_nutrients_gram$portionwgt)
head(addl_foods_nutrients_gram)
temp <- addl_foods_nutrients_gram[,nutrients_ix]/addl_foods_nutrients_gram$portionwgt
nutrients_ix <- 7:ncol(addl_foods_nutrients_gram)
temp <- addl_foods_nutrients_gram[,nutrients_ix]/addl_foods_nutrients_gram$portionwgt
head(temp)
26/75
114/75
addl_foods_nutrients_gram[,nutrients_ix] <- addl_foods_nutrients_gram[,nutrients_ix]/addl_foods_nutrients_gram$portionwgt
head(addl_foods_nutrients_gram)
valid_nutrients
db_nutrients_gram <- db_nutrients[,valid_nutrients]
db_nutrients_gram <- db_nutrients[,valid_nutrients]    nutrients_ix <- 6:ncol(db_nutrients_gram)    db_nutrients_gram[,nutrients_ix] <- apply(db_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    db_nutrients_gram[,nutrients_ix] <- db_nutrients_gram[,nutrients_ix]/100
db_nutrients_gram <- db_nutrients[,valid_nutrients]
nutrients_ix <- 6:ncol(db_nutrients_gram)
db_nutrients_gram[,nutrients_ix] <- apply(db_nutrients_gram[,nutrients_ix], 1:2, as.numeric)
db_nutrients_gram <- db_nutrients[,valid_nutrients]    nutrients_ix <- 6:ncol(db_nutrients_gram)
head(    db_nutrients_gram[,nutrients_ix])
class(db_nutrients_gram[,6])
class(db_nutrients_gram[,8])
which(is.na(db_nutrients_gram[,8]))
which(is.na(db_nutrients_gram[,]))
which(is.na(db_nutrients_gram))
db_nutrients_gram <- db_nutrients[,valid_nutrients]    nutrients_ix <- 6:ncol(db_nutrients_gram)
temp<-apply(db_nutrients_gram[,nutrients_ix], 1:2, as.numeric)
temp
which(is.na(temp))
temp[14784]
14784/6
temp[2464,]
temp[2465,]
temp[2463,]
temp2 <- apply(temp, 1, function(xx) if(anyNA(xx)) print(xx))
which(is.na(temp[,"Carbohydrate (g)"]))
db_nutrients[1916,]
fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]    # missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]    # diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    # at this point, addl_foods_nutrients are given as nutrients per portionwgt    # whereas, db_nutrients are given as nutrients per 100 grams    # convert this so that their numbers are all consistent per gram    valid_nutrients <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))    # reorder a bit    valid_nutrients <- valid_nutrients[c(length(valid_nutrients),(length(valid_nutrients)-1),1:(length(valid_nutrients)-2))]    # calculate the nutrients PER GRAM    addl_foods_nutrients_gram <- addl_foods_nutrients[, c("portionwgt",valid_nutrients)]    nutrients_ix <- 7:ncol(addl_foods_nutrients_gram)    addl_foods_nutrients_gram[,nutrients_ix] <- apply(addl_foods_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    addl_foods_nutrients_gram$portionwgt <- as.numeric(addl_foods_nutrients_gram$portionwgt)    addl_foods_nutrients_gram[,nutrients_ix] <- addl_foods_nutrients_gram[,nutrients_ix]/addl_foods_nutrients_gram$portionwgt#
    db_nutrients_gram <- db_nutrients[,valid_nutrients]    nutrients_ix <- 6:ncol(db_nutrients_gram)    db_nutrients_gram[,nutrients_ix] <- apply(db_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    db_nutrients_gram[,nutrients_ix] <- db_nutrients_gram[,nutrients_ix]/100
head(db_nutrients_gram)
all_nutrients <- rbind(db_nutrients_gram[,valid_nutrients], addl_foods_nutrients_gram[,valid_nutrients])
all_nutrients <- rbind(db_nutrients_gram[,valid_nutrients], addl_foods_nutrients_gram[,valid_nutrients])#
    # all diet records also already have each food and their respective weights in grams (including missing foods)! So simply do:    # aggregate all food records by subject and FoodID (sum up how much of "rice" someone ate for a total day, in grams)        # lump all foods eaten per person per day --> use Diet.ID    food_records_grouped <- aggregate(as.numeric(as.character(food_records$FoodAmt)), list(Diet.ID=food_records$Diet.ID, FoodID=food_records$FoodID), sum)    colnames(food_records_grouped)[3] <- "FoodAmt" # total grams of this food eaten by this person-day    # take grams of each food per subject and multiply by (all_nutrients / 100) to get total nutrients for that food for that subject        merged_unmultiplied <- merge(food_records_grouped, all_nutrients, by="FoodID", all.x=TRUE)
head(merged_unmultiplied)
valid_nutrients
valid_cols <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))    # reorder a bit    valid_cols <- valid_cols[c(length(valid_cols),(length(valid_cols)-1),1:(length(valid_cols)-2))]    valid_nutrients <- valid_cols[6:length(valid_cols)]    # at this point, addl_foods_nutrients are given as nutrients per portionwgt    # whereas, db_nutrients are given as nutrients per 100 grams    # convert this so that their numbers are all consistent per gram#
    # calculate the nutrients PER GRAM    addl_foods_nutrients_gram <- addl_foods_nutrients[, c("portionwgt",valid_cols)]    nutrients_ix <- 7:ncol(addl_foods_nutrients_gram)    addl_foods_nutrients_gram[,nutrients_ix] <- apply(addl_foods_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    addl_foods_nutrients_gram$portionwgt <- as.numeric(addl_foods_nutrients_gram$portionwgt)    addl_foods_nutrients_gram[,nutrients_ix] <- addl_foods_nutrients_gram[,nutrients_ix]/addl_foods_nutrients_gram$portionwgt    db_nutrients_gram <- db_nutrients[,valid_cols]    nutrients_ix <- 6:ncol(db_nutrients_gram)    db_nutrients_gram[,nutrients_ix] <- apply(db_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    db_nutrients_gram[,nutrients_ix] <- db_nutrients_gram[,nutrients_ix]/100
all_nutrients <- rbind(db_nutrients_gram[,valid_cols], addl_foods_nutrients_gram[,valid_cols])
food_records_grouped <- aggregate(as.numeric(as.character(food_records$FoodAmt)), list(Diet.ID=food_records$Diet.ID, FoodID=food_records$FoodID), sum)    colnames(food_records_grouped)[3] <- "FoodAmt" # total grams of this food eaten by this person-day    # take grams of each food per subject and multiply by (all_nutrients / 100) to get total nutrients for that food for that subject        merged_unmultiplied <- merge(food_records_grouped, all_nutrients, by="FoodID", all.x=TRUE)
valid_nutrients
temp <- merged_unmultiplied$FoodAmt * merged_unmultiplied[,valid_nutrients]
head(temp)
head(merged_unmultiplied)
temp[1:30,]
food_records_nutrients <- merge(food_records_grouped, all_nutrients, by="FoodID", all.x=TRUE) # not multiplied yet            food_records_nutrients[,valid_nutrients] <- food_records_nutrients$FoodAmt * food_records_nutrients[,valid_nutrients]
head(food_records_nutrients)
write.table(food_records_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/meals_nutrients.txt", sep="\t", row.names=F, quote=F)
missing.from.favefoods
diffs
head(food_records)
food_records[food_records$Diet.ID=="CS.213",]
food_records[food_records$FoodID== 21407120.0,]
food_records[food_records$FoodID=="21407120.0",]
setwd("/Users/pvangay/Dropbox/UMN/KnightsLab/IMP/ANALYSES/metadata formatting")#
    map.fn <- "sampleid-to-dietid.txt"    nutrients.date.fn <- "nutrients-to-date.txt"    meals.date.fn <- "meals-to-date.txt"    foodgroups.date.fn <- "foodgroups-to-date.txt"#
    map <- read.table(map.fn, sep="\t", header=T, check.names=F, strip.white=T, as.is=T)    nutrients.date <- read.table(nutrients.date.fn, sep="\t", header=T, check.names=F, strip.white=T, as.is=T)    meals.date <- read.table(meals.date.fn, sep="\t", header=T, check.names=F, strip.white=T, as.is=T)    foodgroups.date <- read.table(foodgroups.date.fn, sep="\t", header=T, check.names=F, strip.white=T, as.is=T)#
    # now process all nutrients, meals, foodgroups     ix <- which(colnames(nutrients.date) == "Total Fat (% Calories Eaten )")    colnames(nutrients.date)[ix] <- "% of Calories from Total Fat"#
    # merge two -to-date files, fix some colnames     # note that some samples might be dropped after merge since samples are excluded    nutrients <- merge(map, nutrients.date, by="SuperTracker.DATE")    meals <- merge(map, meals.date, by="SuperTracker.DATE")    foodgroups <- merge(map, foodgroups.date, by="SuperTracker.DATE")    # check that any dates not assigned are just excluded samples    #     missing.nutrients <- nutrients.date[which(!(nutrients.date$SuperTracker.DATE %in% final_nutrients$SuperTracker.DATE)),"SuperTracker.DATE"]#     missing.meals <- meals.date[which(!(meals.date$SuperTracker.DATE %in% final_meals$SuperTracker.DATE)),"SuperTracker.DATE"]#     missing.foodgroups <- foodgroups.date[which(!(foodgroups.date$SuperTracker.DATE %in% final_foodgroups$SuperTracker.DATE)),"SuperTracker.DATE"]#     participants.date.fn <- "participants-to-date.txt"#     participants.date <- read.table(participants.date.fn, sep="\t", header=T, stringsAsFactors=F, strip.white=T)#     samples <- read.table(samples.metadata.fn, sep="\t", header=T, as.is=T, strip.white=T, na.strings=c("NA",""))#     missing.ids <- participants.date[participants.date$SuperTracker.DATE %in% unique(c(missing.nutrients, missing.meals, missing.foodgroups)), "Diet.ID"]#     print(samples[samples$Old.Participant.ID %in% missing.ids,]) # make sure these are all excluded     # reorder with sampleID first    final_nutrients <- nutrients[,c(which(colnames(nutrients)=="Sample.ID"), which(colnames(nutrients)!="Sample.ID"))]    final_foodgroups <- foodgroups[,c(which(colnames(foodgroups)=="Sample.ID"), which(colnames(foodgroups)!="Sample.ID"))]#
    final_meals <- meals[,c(which(colnames(meals)=="Sample.ID"), which(colnames(meals)!="Sample.ID"))]    # rename these columns to match ASA24 so that FoodTree generation will be easier    colnames(final_meals)[which(colnames(final_meals)=="modcode")] <- "ModCode"    colnames(final_meals)[which(colnames(final_meals)=="foodcode")] <- "FoodCode"    colnames(final_meals)[which(colnames(final_meals)=="Food")] <- "Main.food.description"#
    # ** note that sometimes R is wonky and doesn't write out stuff properly, might just have to rerun#
    write.table(final_nutrients, "nutrients.txt", sep="\t", row.names=F, quote=F,qmethod="double")    write.table(final_meals, "meals.txt", sep="\t", row.names=F, quote=F,qmethod="double")    write.table(final_foodgroups, "foodgroups.txt", sep="\t", row.names=F, quote=F,qmethod="double")
setwd("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R")
format.foods(orig_food_records_fn, old_food_records_fn, dedupe=F) # do NOT deduplicate records
diet <- read.table(old_food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    new.foods <- read.table(orig_new_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$tempID <- 1:nrow(diet) # create dummy ID for now#
    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    # write this out so we can pass it in when we make the food tree; remove foods with duplicate portions    # This file will be the formatted "new foods" that we'd like to supplement the SuperTracker Database with    x <- new.foods    x$FoodID <- paste(x$FoodCode, x$ModCode, sep=".")    x <- x[!duplicated(x$Main.food.description),]    write.table(x, new_foods_fn, sep = "\t", quote = FALSE, row.names = FALSE)    blank.diets <- diet[is.na(diet$FoodCode),]    # remove columns we're going to fill in     c.ix <- which(colnames(blank.diets) %in% c("FoodCode", "ModCode", "FoodAmt", "FoodID", "portionwgt"))    blank.diets <- blank.diets[,-c.ix]    new.diet <- merge(blank.diets, new.foods, by=c("Main.food.description", "Portion"))#
    valid.diets <- diet[!is.na(diet$FoodCode),]    valid.diets <- rbind(valid.diets[,intersect(colnames(new.diet), colnames(valid.diets))], new.diet[,intersect(colnames(new.diet), colnames(valid.diets))])    # now calculate the total grams eaten, and call it "FoodAmt" to be consistent with ASA24    valid.diets$FoodAmt <- as.numeric(valid.diets$PortionAmt) * as.numeric(valid.diets$portionwgt)#
    # make FoodID    valid.diets$FoodID <- paste(valid.diets$FoodCode, valid.diets$ModCode, sep=".")#
    # check temporary variable ID only to see if any foods are missing    #diet[!(diet$tempID %in% valid.diets$tempID),]    #write.table(unique(diet[!(diet$ID %in% valid.diets$ID),c("Main.food.description", "Old.Main.food.description")]), file="new.missing.foods.txt", sep="\t", row=F, quote=F)#
    write.table(valid.diets, food_records_fn, sep = "\t", quote = FALSE, row.names = FALSE)
# manually check spelling etc between fave foods list from supertracker and curated sheet    fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]####### missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]####### diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    valid_cols <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))    # reorder a bit    valid_cols <- valid_cols[c(length(valid_cols),(length(valid_cols)-1),1:(length(valid_cols)-2))]    valid_nutrients <- valid_cols[6:length(valid_cols)]    # at this point, addl_foods_nutrients are given as nutrients per portionwgt    # whereas, db_nutrients are given as nutrients per 100 grams    # convert this so that their numbers are all consistent per gram#
    # calculate the nutrients PER GRAM    addl_foods_nutrients_gram <- addl_foods_nutrients[, c("portionwgt",valid_cols)]    nutrients_ix <- 7:ncol(addl_foods_nutrients_gram)    addl_foods_nutrients_gram[,nutrients_ix] <- apply(addl_foods_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    addl_foods_nutrients_gram$portionwgt <- as.numeric(addl_foods_nutrients_gram$portionwgt)    addl_foods_nutrients_gram[,nutrients_ix] <- addl_foods_nutrients_gram[,nutrients_ix]/addl_foods_nutrients_gram$portionwgt    db_nutrients_gram <- db_nutrients[,valid_cols]    nutrients_ix <- 6:ncol(db_nutrients_gram)    db_nutrients_gram[,nutrients_ix] <- apply(db_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    db_nutrients_gram[,nutrients_ix] <- db_nutrients_gram[,nutrients_ix]/100    all_nutrients <- rbind(db_nutrients_gram[,valid_cols], addl_foods_nutrients_gram[,valid_cols])#
    # all diet records also already have each food and their respective weights in grams (including missing foods)! So simply do:    # aggregate all food records by subject and FoodID (sum up how much of "rice" someone ate for a total day, in grams)        # lump all foods eaten per person per day --> use Diet.ID    food_records_grouped <- aggregate(as.numeric(as.character(food_records$FoodAmt)), list(Diet.ID=food_records$Diet.ID, FoodID=food_records$FoodID), sum)    colnames(food_records_grouped)[3] <- "FoodAmt" # total grams of this food eaten by this person-day    # take grams of each food per subject and multiply by (all_nutrients / 100) to get total nutrients for that food for that subject        food_records_nutrients <- merge(food_records_grouped, all_nutrients, by="FoodID", all.x=TRUE) # not multiplied yet            food_records_nutrients[,valid_nutrients] <- food_records_nutrients$FoodAmt * food_records_nutrients[,valid_nutrients]#
    write.table(food_records_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/meals_nutrients.txt", sep="\t", row.names=F, quote=F)
head(final_meals)
final_meals[final_meals$Sample.ID=="CS.213",]
format.foods(orig_food_records_fn, old_food_records_fn, dedupe=F) # do NOT deduplicate records
diet <- read.table(old_food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    new.foods <- read.table(orig_new_foods_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    diet$tempID <- 1:nrow(diet) # create dummy ID for now#
    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    # write this out so we can pass it in when we make the food tree; remove foods with duplicate portions    # This file will be the formatted "new foods" that we'd like to supplement the SuperTracker Database with    x <- new.foods    x$FoodID <- paste(x$FoodCode, x$ModCode, sep=".")    x <- x[!duplicated(x$Main.food.description),]    write.table(x, new_foods_fn, sep = "\t", quote = FALSE, row.names = FALSE)    blank.diets <- diet[is.na(diet$FoodCode),]    # remove columns we're going to fill in     c.ix <- which(colnames(blank.diets) %in% c("FoodCode", "ModCode", "FoodAmt", "FoodID", "portionwgt"))    blank.diets <- blank.diets[,-c.ix]    new.diet <- merge(blank.diets, new.foods, by=c("Main.food.description", "Portion"))#
    valid.diets <- diet[!is.na(diet$FoodCode),]    valid.diets <- rbind(valid.diets[,intersect(colnames(new.diet), colnames(valid.diets))], new.diet[,intersect(colnames(new.diet), colnames(valid.diets))])    # now calculate the total grams eaten, and call it "FoodAmt" to be consistent with ASA24    valid.diets$FoodAmt <- as.numeric(valid.diets$PortionAmt) * as.numeric(valid.diets$portionwgt)#
    # make FoodID    valid.diets$FoodID <- paste(valid.diets$FoodCode, valid.diets$ModCode, sep=".")#
    # check temporary variable ID only to see if any foods are missing    #diet[!(diet$tempID %in% valid.diets$tempID),]    #write.table(unique(diet[!(diet$ID %in% valid.diets$ID),c("Main.food.description", "Old.Main.food.description")]), file="new.missing.foods.txt", sep="\t", row=F, quote=F)#
    write.table(valid.diets, food_records_fn, sep = "\t", quote = FALSE, row.names = FALSE)
# manually check spelling etc between fave foods list from supertracker and curated sheet    fave.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - raw.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    # replace all special chars    fave.foods$Main.food.description <- gsub("[^[:alnum:]]+", "_", fave.foods[,"Food Name"])    # separate out portion from amount    portionsplit <- regmatches(fave.foods[,"Food Portion"], regexpr(" ", fave.foods[,"Food Portion"]), invert = TRUE)    d <- data.frame(matrix(unlist(portionsplit), nrow=length(portionsplit), byrow=T), stringsAsFactors=FALSE)    colnames(d) <- c("Amount", "Portion")    d$Amount[d$Amount == "1/2"] <- .5    d$Amount[d$Amount == "3/2"] <- 3/2    d$Amount[d$Amount == "1/8"] <- 1/8    d$Amount[d$Amount == "1/4"] <- 1/4    d$Amount[d$Amount == "5/4"] <- 5/4    d$Amount <- as.numeric(d$Amount)    favefoods_nutrients <- data.frame(fave.foods, d, check.names=F)    new.foods <- read.table("/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/raw data/original_imp.missing.foods.txt", head=TRUE, sep="\t", strip.white=T, colClasses="character", check.names=F)    new.foods$ModCode[new.foods$ModCode == ""] <- "0"    new.foods$FoodID <- paste(new.foods$FoodCode, new.foods$ModCode, sep=".")    missing <- new.foods$Main.food.description[!(new.foods$Main.food.description %in% favefoods_nutrients$Main.food.description)]    #sort(missing)    # at this point manually edit the fave.foods names with search/replace in text file so that it matches new.foods because this is what is in the diets    # edit the portions     missing.portions <- unique(favefoods_nutrients$Portion)[!(unique(favefoods_nutrients$Portion) %in% unique(diet$Portion))]    new.portions <- c("ounce(s)", "cup", "package (3 oz), prepared", "tablespoon", "portion", "portion", "mug (8 fl oz)", "tablespoon", "meal (10.75 oz)", "lean cuisine meal",        "pizza", "serving", "egg roll", "stick", "egg roll", "portion (2 fritters with syrup)")    for(i in 1:length(missing.portions))  favefoods_nutrients$Portion[favefoods_nutrients$Portion == missing.portions[i]] <- new.portions[i]#
    colnames(favefoods_nutrients)[2] <- "Old.Food.Portion"    colnames(favefoods_nutrients)[which(colnames(favefoods_nutrients) == "Amount")] <- "FoodAmt" # so it matches other tables# at this point, we want to check that all foods in diet all have nutrients    # load diets    food_records_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/R/data/IMP/dietrecords.txt" # already formatted, NAs corrected by add.missing.foods.to.diets    food_records <- read.table(food_records_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T)    # load current nutrients database    supertracker_db_nutrients_fn <- "/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/SuperTracker Database - Nutrients.txt"        db_nutrients <- read.table(supertracker_db_nutrients_fn, header = TRUE, sep="\t", colClasses="character", quote="", strip.white=T, check.names=F)    db_nutrients$Main.food.description <- gsub("[^[:alnum:]]+", "_", db_nutrients[,"Food Name"])    db_nutrients$FoodID <- paste(db_nutrients$FoodCode, db_nutrients$ModCode, sep=".")#
    # check that all foods in food_records are found in either db_nutrients or favefoods_nutrients    # need to check based on IDs against database    missing.from.db <- food_records[!(food_records$FoodID %in% db_nutrients$FoodID), c("FoodID", "Main.food.description")]#
    missing.from.favefoods <- missing.from.db[!(missing.from.db$Main.food.description %in% favefoods_nutrients$Main.food.description),]####### missing.from.favefoods should be empty!#
    # let's only grab food IDs from our custom nutrient list for those that are missing.from.db    missing.from.db <- unique(missing.from.db)    addl_foods_sub <- new.foods[new.foods$Main.food.description %in% missing.from.db$Main.food.description,]    # check that all foods and all portions are accounted for    diffs <- addl_foods_sub[!(paste(addl_foods_sub[,1], addl_foods_sub[,2],sep="-") %in% paste(favefoods_nutrients[,"Main.food.description"], favefoods_nutrients[,"Portion"],sep="-")),]####### diffs should also be empty!!#
    addl_foods_nutrients <- merge(addl_foods_sub, favefoods_nutrients, by=c("Main.food.description","Portion"))    write.table(addl_foods_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/favorite foods nutrients - formatted.txt", sep="\t", row.names=F, quote=F)    # now let's match up all of the names so that they're identical    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Dietary Fiber (g)")] <- "Total Dietary Fiber (g)"    colnames(addl_foods_nutrients)[which(colnames(addl_foods_nutrients) == "Total Calories")] <- "Energy (kcal)"#
    valid_cols <- intersect(colnames(db_nutrients), colnames(addl_foods_nutrients))    # reorder a bit    valid_cols <- valid_cols[c(length(valid_cols),(length(valid_cols)-1),1:(length(valid_cols)-2))]    valid_nutrients <- valid_cols[6:length(valid_cols)]    # at this point, addl_foods_nutrients are given as nutrients per portionwgt    # whereas, db_nutrients are given as nutrients per 100 grams    # convert this so that their numbers are all consistent per gram#
    # calculate the nutrients PER GRAM    addl_foods_nutrients_gram <- addl_foods_nutrients[, c("portionwgt",valid_cols)]    nutrients_ix <- 7:ncol(addl_foods_nutrients_gram)    addl_foods_nutrients_gram[,nutrients_ix] <- apply(addl_foods_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    addl_foods_nutrients_gram$portionwgt <- as.numeric(addl_foods_nutrients_gram$portionwgt)    addl_foods_nutrients_gram[,nutrients_ix] <- addl_foods_nutrients_gram[,nutrients_ix]/addl_foods_nutrients_gram$portionwgt    db_nutrients_gram <- db_nutrients[,valid_cols]    nutrients_ix <- 6:ncol(db_nutrients_gram)    db_nutrients_gram[,nutrients_ix] <- apply(db_nutrients_gram[,nutrients_ix], 1:2, as.numeric)    db_nutrients_gram[,nutrients_ix] <- db_nutrients_gram[,nutrients_ix]/100    all_nutrients <- rbind(db_nutrients_gram[,valid_cols], addl_foods_nutrients_gram[,valid_cols])#
    # all diet records also already have each food and their respective weights in grams (including missing foods)! So simply do:    # aggregate all food records by subject and FoodID (sum up how much of "rice" someone ate for a total day, in grams)        # lump all foods eaten per person per day --> use Diet.ID    food_records_grouped <- aggregate(as.numeric(as.character(food_records$FoodAmt)), list(Diet.ID=food_records$Diet.ID, FoodID=food_records$FoodID), sum)    colnames(food_records_grouped)[3] <- "FoodAmt" # total grams of this food eaten by this person-day    # take grams of each food per subject and multiply by (all_nutrients / 100) to get total nutrients for that food for that subject        food_records_nutrients <- merge(food_records_grouped, all_nutrients, by="FoodID", all.x=TRUE) # not multiplied yet            food_records_nutrients[,valid_nutrients] <- food_records_nutrients$FoodAmt * food_records_nutrients[,valid_nutrients]#
    write.table(food_records_nutrients, file="/Users/pvangay/Dropbox/UMN/KnightsLab/Food_Tree/IMP/make fooddb-to-nutrients mapping/meals_nutrients.txt", sep="\t", row.names=F, quote=F)
getwd()
check.db(food_database_fn, food_records_fn, output_fn="data/IMP/missing.txt")
make.food.tree(nodes_fn="data/NodeLabels.txt", food_database_fn,     addl_foods_fn=new_foods_fn, output_tree_fn="output/supertracker.tree.txt",     output_taxonomy_fn = food_taxonomy_fn)
check.db(food_taxonomy_fn, food_records_fn, output_fn="data/IMP/diet.missing.from.taxonomy.file.txt")
fotu <- make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_taxonomy_fn, output_fn = "output/imp.food.otu.txt")
filter.db.by.diet.records(food_database_fn=food_database_fn, food_records_fn=food_records_fn, output_fn=food_reported_database_fn)    make.food.tree(nodes_fn="data/NodeLabels.txt", food_reported_database_fn,         addl_foods_fn=new_foods_fn, output_tree_fn="output/supertracker.tree.foodsreportedonly.txt",         output_taxonomy_fn = food_reported_taxonomy_fn)    # check our full taxonomy against our food records (should be empty if all foods are covered)    check.db(food_reported_taxonomy_fn, food_records_fn, output_fn="data/IMP/diet.missing.from.taxonomy.file.foodsreportedonly.txt")    # OTU generation should not be necessary here, but can double check    make.food.otu(food_records_fn, food_record_id = "Sample.ID", food_reported_taxonomy_fn, output_fn = "output/imp.food.otu.foodsreportedonly.txt")
